import com.company.DStack;
package eg.edu.alexu.csd.datastructure.stack.cs50;
public class IExpressionEvaluatorr {
    public int ordered(char x)
    {
        if(x=='+'||x=='-') {

            return 1; }

        else if(x=='*'||x=='/') {

            return 2;}

        else if (x=='^') {
            return 3; }
        else {
            return -1;
        }
    }
    public String infixToPostfix(String expression){
        DStack r = new DStack();
        String res = new String();
        for (int i = 0 ; i < expression.length();i++){
            if (Character.isDigit(expression.charAt(i))||Character.isLetter(expression.charAt(i))){
                res += expression.charAt(i) ;
            }
            else if (expression.charAt(i)==' '){
                continue;
            }
            else if (expression.charAt(i)=='('){
                r.push('(');
            }
            else if (expression.charAt(i)==')'){
                while (!r.isEmpty() && (char)r.peek() != '('){
                    res += r.pop();
                }
                if ((char)r.peek() != '(' && r.isEmpty()){
                    return "invalid";
                }
                else {
                    r.pop();
                }
            }
            else {
                while(!r.isEmpty() && ordered(expression.charAt(i)) <= ordered((char)r.peek())) {
                    res+=r.pop();
                }
                r.push(expression.charAt(i));
            }
        }
        while(!r.isEmpty()) {
            res+=r.pop();

        }

        return res ;
    }
    public int evaluate(String expression) {

        boolean negative;
        int y=0;
        DStack s =new DStack();
        for (int i=0;i<expression.length();i++) {
            if(expression.charAt(i)==' ') {

            }
            else if (Character.isDigit(expression.charAt(i))) {
                negative = false;
                if(i>0) {
                    if(expression.charAt(i-1)=='-') {
                        negative=true;
                    }
                }
                int k=0,f=0,v=0,b=0;
                int sum =0;
                v=b=i;
                while(Character.isDigit(expression.charAt(v))&&v<expression.length()) {
                    f++;
                    v++;
                }

                int[]array = new int[f];
                for (int a=f;a>0;a--) {
                    array[f-a]=Character.getNumericValue(expression.charAt(b));
                    b++;
                }

                for(int a=0;a<f/2;a++) {
                    int temp =array[f-a-1];
                    array[f-a-1]=array[a];
                    array[a]=temp;
                }

                for(int a=0;a<f;a++) {
                    sum+=array[a]*(int)Math.pow(10, k);
                    k++;
                }

                i=i+f-1;

                if(negative) {
                    sum=-sum;
                }


                s.push(sum);
            }
            else {


                if (expression.charAt(i)=='+') {
                    int val1 =(int)s.pop();
                    int val2 =(int)s.pop();
                    y=val1+val2;
                    s.push(y);
                }
                else if (expression.charAt(i)=='*') {
                    int val1 =(int)s.pop();
                    int val2 =(int)s.pop();
                    y=val1*val2;
                    s.push(y);
                }
                else if (expression.charAt(i)=='-') {
                    if(i+1!=expression.length()) {
                        if(!Character.isDigit(expression.charAt(i+1))) {
                            int val1 =(int)s.pop();
                            int val2 =(int)s.pop();
                            y=val2-val1;
                            s.push(y);
                        }
                    }
                    else {
                        int val1 =(int)s.pop();
                        int val2 =(int)s.pop();
                        y=val2-val1;
                        s.push(y);
                    }


                }
                else if (expression.charAt(i)=='/') {
                    int val1 =(int)s.pop();
                    int val2 =(int)s.pop();
                    y=val2/val1;
                    s.push(y);
                }
                else if (expression.charAt(i)=='^') {
                    int val1 =(int)s.pop();
                    int val2 =(int)s.pop();
                    y=(int)Math.pow(val2, val1);
                    s.push(y);
                }
            }
        }
        return (int)s.pop() ;
    }
    }
interface IExpressionEvaluator {
    public String infixToPostfix(String expression);
    public int evaluate(String expression);
}
